import java.util.*;

class Node {
    int data;
    Node left, right;

    Node(int val) {
        this.data = val;
        this.left = null;
        this.right = null;
    }
}

public class BinaryTreeLevelOrder {

    // Function to build tree from level order input
    public static Node buildTree(String[] input) {
        if (input.length == 0 || input[0].equals("null")) {
            return null;
        }

        Node root = new Node(Integer.parseInt(input[0]));
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        int i = 1;

        while (!queue.isEmpty() && i < input.length) {
            Node current = queue.poll();

            // left child
            if (i < input.length && !input[i].equals("null")) {
                current.left = new Node(Integer.parseInt(input[i]));
                queue.add(current.left);
            }
            i++;

            // right child
            if (i < input.length && !input[i].equals("null")) {
                current.right = new Node(Integer.parseInt(input[i]));
                queue.add(current.right);
            }
            i++;
        }

        return root;
    }

    // Function to print level order traversal
    public static void printLevelOrder(Node root) {
        if (root == null) return;

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            Node curr = queue.poll();
            System.out.print(curr.data + " ");

            if (curr.left != null)
                queue.add(curr.left);
            if (curr.right != null)
                queue.add(curr.right);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        // Example input: 1 2 3 null 4 null 5
        System.out.println("Enter level order input (use 'null' for empty):");
        String[] input = sc.nextLine().split(" ");
        
        Node root = buildTree(input);

        System.out.println("Level Order Traversal:");
        printLevelOrder(root);
    }
}
