import java.util.*;

class Node {
    int data;
    Node left, right;

    Node(int val) {
        this.data = val;
        this.left = null;
        this.right = null;
    }
}

public class BinaryTreeHeight {

    // Build tree from level order input
    public static Node buildTree(String[] input) {
        if (input.length == 0 || input[0].equals("null")) {
            return null;
        }

        Node root = new Node(Integer.parseInt(input[0]));
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        int i = 1;

        while (!queue.isEmpty() && i < input.length) {
            Node current = queue.poll();

            // left child
            if (i < input.length && !input[i].equals("null")) {
                current.left = new Node(Integer.parseInt(input[i]));
                queue.add(current.left);
            }
            i++;

            // right child
            if (i < input.length && !input[i].equals("null")) {
                current.right = new Node(Integer.parseInt(input[i]));
                queue.add(current.right);
            }
            i++;
        }

        return root;
    }

    // Recursive function to find height of the tree
    public static int findHeight(Node root) {
        if (root == null)
            return -1;  // or return 0 if height of empty tree is 0

        int leftHeight = findHeight(root.left);
        int rightHeight = findHeight(root.right);

        return Math.max(leftHeight, rightHeight) + 1;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter level order input (use 'null' for empty):");
        String[] input = sc.nextLine().split(" ");

        Node root = buildTree(input);

        int height = findHeight(root);
        System.out.println("Height of the binary tree: " + height);
    }
}
